/*
 * This Groovy source file was generated by the Gradle 'init' task.
 */
package re.notifica.gradle

import org.gradle.api.Project
import org.gradle.api.Plugin

/**
 * Notificare Services plugin
 */
public class NotificareServicesPlugin implements Plugin<Project> {


    // These are the plugin types and the set of associated plugins whose presence should be checked for.
    private final static enum PluginType{
        APPLICATION([
                "android",
                "com.android.application"
        ]),
        LIBRARY([
                "android-library",
                "com.android.library"
        ]),
        FEATURE([
                "android-feature",
                "com.android.feature"
        ]),
        MODEL_APPLICATION([
                "com.android.model.application"
        ]),
        MODEL_LIBRARY(["com.android.model.library"])
        public PluginType(Collection plugins) {
            this.plugins = plugins
        }
        private final Collection plugins
        public Collection plugins() {
            return plugins
        }
    }

    public void apply(Project project) {

        project.logger.info('Initializing Notificare Services Plugin')

        for (PluginType pluginType : PluginType.values()) {
            for (String plugin : pluginType.plugins()) {
                if (project.plugins.hasPlugin(plugin)) {
                    setupPlugin(project, pluginType)
                    return
                }
            }
        }
        // If the google-service plugin is applied before any android plugin.
        // We should warn that google service plugin should be applied at
        // the bottom of build file.
        showWarningForPluginLocation(project)

        // Setup google-services plugin after android plugin is applied.
        project.plugins.withId("android", {
            setupPlugin(project, PluginType.APPLICATION)
        })
        project.plugins.withId("android-library", {
            setupPlugin(project, PluginType.LIBRARY)
        })
        project.plugins.withId("android-feature", {
            setupPlugin(project, PluginType.FEATURE)
        })
    }

    private void showWarningForPluginLocation(Project project) {
        project.getLogger().warn(
                "Warning: Please apply notificare-services plugin at the bottom of the build file.")
    }

    private void setupPlugin(Project project, PluginType pluginType) {
        switch (pluginType) {
            case PluginType.APPLICATION:
                project.android.applicationVariants.all { variant ->
                    handleVariant(project, variant)
                }
                break
            case PluginType.LIBRARY:
                project.android.libraryVariants.all { variant ->
                    handleVariant(project, variant)
                }
                break
            case PluginType.FEATURE:
                project.android.featureVariants.all { variant ->
                    handleVariant(project, variant)
                }
                break
            case PluginType.MODEL_APPLICATION:
                project.model.android.applicationVariants.all { variant ->
                    handleVariant(project, variant)
                }
                break
            case PluginType.MODEL_LIBRARY:
                project.model.android.libraryVariants.all { variant ->
                    handleVariant(project, variant)
                }
                break
        }
    }

    private static void handleVariant(Project project,
                                      def variant) {

        File outputDir =
                project.file("$project.buildDir/generated/res/notificare-services/$variant.dirName")

        NotificareServicesTask task = project.tasks
                .create("process${variant.name.capitalize()}NotificareServices",
                        NotificareServicesTask)

        task.setIntermediateDir(outputDir)
        task.setVariantDir(variant.dirName)

        if (variant.respondsTo("applicationIdTextResource")) {
            task.setPackageNameResource(variant.applicationIdTextResource)
            task.dependsOn(variant.applicationIdTextResource)
        } else {
            task.setPackageNameString(variant.applicationId)
        }

        task.ext.generatedResFolders = project.files(outputDir).builtBy(task)
        variant.registerGeneratedResFolders(task.generatedResFolders)
        variant.mergeResourcesProvider.configure { dependsOn(task) }
    }
}
